.\"
.\"
.\"  This file is part of Frama-C.
.\"
.\"  Copyright (C) 2007-2015
.\"    CEA (Commissariat à l'énergie atomique et aux énergies
.\"         alternatives)
.\"
.\"  you can redistribute it and/or modify it under the terms of the GNU
.\"  Lesser General Public License as published by the Free Software
.\"  Foundation, version 2.1.
.\"
.\"  It is distributed in the hope that it will be useful,
.\"  but WITHOUT ANY WARRANTY; without even the implied warranty of
.\"  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\"  GNU Lesser General Public License for more details.
.\"
.\"  See the GNU Lesser General Public License version 2.1
.\"  for more details (enclosed in the file licenses/LGPLv2.1).
.\"
.\"

.TH E-ACSL-GCC.SH 1 2016-02-02

.SH NAME
.B e-acsl-gcc.sh
\- instrument and compile C files with E-ACSL
.SH SYNOPSIS
.B e-acsl-gcc.sh
[
.I options
]
.I files
.SH DESCRIPTION
.B e-acsl-gcc.sh
is a convenience wrapper for instrumentation of C programs using the
\fBE-ACSL\fP \fBFrama-C\fP plugin and their subsequent compilation using
the GNU compiler collection (\fBGCC\fP).
.SH OPTIONS
.TP
.B -h, --help
show a help page.
.TP
.B -c, --compile
compile the generated and the original (supplied) sources.
By default no compilation is performed.
.TP
.B -D, --rt-debug
Enable runtime debug features, i.e., compile unoptimized executable
with assertions and extra checks.
.TP
.B -X, --instrumented-only
Do not compile original code. Has effect only in the presence of the \fI-c\fP
flag.
.TP
.B -C, --compile-only
compile the input files as if they were generated by \fBE-ACSL\fP.
.TP
.B -p, --print
output the code generated by E-ACSL to \fISTDOUT\fP using rich formatting
features enabled via \fBpygmentize\fP. If no \fBpygmentize\fP
executable is found in the system path, the generated sources are
printed as is using the \fBcat\fP command.
.TP \fI \fP
.B -d, --debug=\fI<N>
pass a value to the \fBFrama-C\fP -\fIdebug\fP option.
By default the -\fIdebug\fP flag is unused.
.TP
.B -v, --verbose=\fI<N>
pass a value to the \fBFrama-C\fP -\fIverbose\fP option.
By default the -\fIverbose\fP flag is unused.
.TP
.B -o, --ocode=\fI<FILE>
output the \fBE-ACSL\fP instrumented code to \fI<FILE>\fP.
Defaults to \fIa.out.frama.c\fP.
.TP
.B -O, --oexec=\fI<FILE>
output the code compiled from the uninstrumented sources to \fI<FILE>\fP.
The executable compiled from the files generated by \fBE-ACSL\fP is
appended the \fI.e.acsl\fP suffix.
Unless specified, the
names of the executables generated from the original
and the modified programs are
\fIa.out\fP and \fIa.out.e-acsl\fP respectively.
.TP
.B --oexec-e-acsl=\fI<FILE>
name of the executable file generated from the \fBE-ACSL\fP-instrumented file.
Unless specified, the executable is named as inidicated by the \fB--oexec\fP option.
.TP
.B -f, --frama-c-only
run input source files through \fBFrama-C\fP without \fBE-ACSL\fP instrumentations.
.TP
.B -E, --extra-cpp-args=\fI<FLAGS>
pass additional arguments to the \fBFrama-C\fP pre-processor.
.TP
.B -L, --frama-c-stdlib
use the \fBFrama-C\fP standard library instead of a system-wide one.
.TP
.B -M, --full-mmodel
maximize memory-related instrumentation.
.TP
.B -g, --gmp
always use GMP integers instead of C integral types.
By default the GMP integers are used on as-needed basis.
.TP
.B -l, --ld-flags=\fI<FLAGS>
pass the specified flags to the linker.
.TP
.B -e, --cpp-flags=\fI<FLAGS>
pass the specified flags to the pre-processor at compile-time.
For instrumentation-time pre-processor flags see \fB--extra-cpp-args\fP option.
.TP
.B -q, --quiet
suppress any output except for errors and warnings.
.TP
.B -s, --logfile=\fI<FILE>
redirect all output to a given file.
.TP
.B -F, --frama-c-extra=\fI<FLAGS>
pass an extra option to a \fBFrama-C\fP invocation.
.TP
.B -a, --rte=\fI<OPTSTRING>
annotate a source program with assertions using a run of an RTE plugin prior to
E-ACSL. \fIOPTSTRING\fP is a comma-separated string that specifies the types of
generated assertions.
Valid arguments are:

  \fIsigned-overflow\fP   \- signed integer overflows.
  \fIunsigned-overflow\fP \- unsigned integer overflows.
  \fIsigned-downcast\fP   \- signed downcast exceeding destination range.
  \fIunsigned-downcast\fP \- unsigned downcast exceeding destination range.
  \fImem\fP               \- pointer or array accesses.
  \fIfloat-to-int\fP      \- casts from floating-point to integer.
  \fIdiv\fP               \- division by zero.
  \fIprecond\fP           \- function calls based on contracts.
  \fIshift\fP             \- left and right shifts by a value out of bounds.
  \fpointer-call\fP       \- annotate functions calls through pointers.
  \fIall\fP               \- all of the above.
.TP
.B -A, --rte-select=\fI<OPTSTRING>
Restrict annotations to a given list of functions.
\fIOPTSTRING\fP is a comma-separated string comprising function names.
.TP
.B -m, --memory-model=\fI<model>
memory model (i.e., a runtime library for checking memory related annotations)
to be linked against the instrumented file.

Valid arguments are:
  \fIbittree\fP     \- memory modelling using a Patricia trie.
  \fIsegment\fP     \- shadow based segment model.

By default the Patricia trie  memory model is used.
.TP
.B --print-models
Print the names of the supported memory models
.TP
.B -I, --frama-c=\fI<FILE>
the name of the \fBFrama-C\fP executable. By default the
first \fIframa-c\fP executable found in the system path is used.
.TP
.B -G, --gcc=\fI<FILE>
the name of the \fBGCC\fP executable. By default the first \fIgcc\fP
executable found in the system path is used.

.SH EXIT STATUS
.TP
.B 0
Successful execution
.TP
.B 1
Invalid user input
.TP
.B \fBFrama-C\fP or \fBGCC\fP error code
Instrumentation- or compile-time error

.SH EXAMPLES

.B e-acsl-gcc.sh foo.c

Instrument foo.c and output the instrumented code to \fIa.out.frama.c\fP.

.B e-acsl-gcc.sh -P -c -ogen_foo.c -Ofoo foo.c

Instrument \fIfoo.c\fP, output the instrumented code to \fIgen_foo.c\fP and
compile \fIfoo.c\fP into \fIfoo\fP and \fIgen_foo.c\fP into \fIfoo.e-acsl\fP.
The \fB-P\fP option specifies that the instrumentation should omit debug
functionality.

.B e-acsl-gcc.sh --memory-model=bittree -C gen_foo.c

Assume \fIgen_foo.c\fP has been instrumented by \fBE-ACSL\fP and compile it into
\fIa.out.e-acsl\fP using \fBbittree\fP memory model.

.SH SEE ALSO
\fBgcc\fP(1), \fBcpp\fP(1), \fBld\fP(1), \fBframa-c\fP(1)
